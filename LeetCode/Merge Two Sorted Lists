
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        # Create a dummy node to simplify list construction
        dummy = ListNode()
        current = dummy

        while list1 and list2:
            if list1.val < list2.val:
                current.next=list1
                list1 = list1.next
            else:
                current.next=list2
                list2 = list2.next
           
           # Move the current pointer to the next node
            current = current.next

            # Attach the remaining part of list1 or list2 to the merged list
            # If list1 is not None, attach list1; otherwise, attach list2
            current.next = list1 if list1 is not None else list2
                # merged lists sta
        return dummy.next
    

# Example usage
list1 = ListNode()
list2 = ListNode(0)

solution = Solution()
merged_list = solution.mergeTwoLists([], 0)

# Function to print the merged list
def print_list(node):
    while node:
        print(node.val, end=" -> ")
        node = node.next
    print("None")

print_list(merged_list)